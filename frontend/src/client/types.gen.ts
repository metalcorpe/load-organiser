// This file is auto-generated by @hey-api/openapi-ts

export type AFFlevel =
  | "level_1"
  | "level_2"
  | "level_3"
  | "level_4"
  | "level_5"
  | "level_6"
  | "level_7"
  | "graduate"

export type AircraftCreate = {
  registration: string
  model: string
  capacity: number
  is_active?: boolean
}

export type AircraftPublic = {
  registration: string
  model: string
  capacity: number
  is_active?: boolean
  id: string
}

export type AircraftUpdate = {
  registration?: string | null
  model?: string | null
  capacity?: number | null
  is_active?: boolean | null
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type InstructorCreate = {
  name: string
  email: string
  tandem_certified?: boolean
  aff_certified?: boolean
  is_active?: boolean
}

export type InstructorPublic = {
  name: string
  email: string
  tandem_certified?: boolean
  aff_certified?: boolean
  is_active?: boolean
  id: string
}

export type InstructorsPublic = {
  data: Array<InstructorPublic>
  count: number
}

export type InstructorUpdate = {
  name?: string | null
  email?: string | null
  tandem_certified?: boolean | null
  aff_certified?: boolean | null
  is_active?: boolean | null
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type JumpCreate = {
  load_id: string
  jumper_name: string
  jump_type: JumpType
  exit_order: number
  instructor_id?: string | null
  aff_level?: AFFlevel | null
  customer_email?: string | null
  notes?: string | null
}

export type JumpPublic = {
  load_id: string
  jumper_name: string
  jump_type: JumpType
  exit_order: number
  instructor_id?: string | null
  aff_level?: AFFlevel | null
  customer_email?: string | null
  notes?: string | null
  id: string
  created_at: string
  instructor?: InstructorPublic | null
}

export type JumpsPublic = {
  data: Array<JumpPublic>
  count: number
}

export type JumpType = "tandem" | "aff" | "fun_jumper"

export type JumpUpdate = {
  load_id?: string | null
  jumper_name?: string | null
  jump_type?: JumpType | null
  exit_order?: number | null
  instructor_id?: string | null
  aff_level?: AFFlevel | null
  customer_email?: string | null
  notes?: string | null
}

export type LoadCreate = {
  aircraft_id: string
  scheduled_time: string
  altitude?: number
  status?: LoadStatus
  notes?: string | null
}

export type LoadPublic = {
  aircraft_id: string
  scheduled_time: string
  altitude?: number
  status?: LoadStatus
  notes?: string | null
  id: string
  created_at: string
  aircraft: AircraftPublic
  jumps?: Array<JumpPublic>
}

export type LoadsPublic = {
  data: Array<LoadPublic>
  count: number
}

export type LoadStatus =
  | "planning"
  | "confirmed"
  | "boarded"
  | "departed"
  | "completed"
  | "cancelled"

export type LoadUpdate = {
  aircraft_id?: string | null
  scheduled_time?: string | null
  altitude?: number | null
  status?: LoadStatus | null
  notes?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type WeatherCondition = "good" | "marginal" | "poor"

export type WeatherReportCreate = {
  date: string
  wind_speed: number
  wind_direction: number
  visibility: number
  cloud_ceiling?: number | null
  condition: WeatherCondition
  suitable_for_tandems?: boolean
  suitable_for_students?: boolean
  suitable_for_fun_jumpers?: boolean
}

export type WeatherReportPublic = {
  date: string
  wind_speed: number
  wind_direction: number
  visibility: number
  cloud_ceiling?: number | null
  condition: WeatherCondition
  suitable_for_tandems?: boolean
  suitable_for_students?: boolean
  suitable_for_fun_jumpers?: boolean
  id: string
  created_at: string
}

export type WeatherReportsPublic = {
  data: Array<WeatherReportPublic>
  count: number
}

export type WeatherReportUpdate = {
  date?: string | null
  wind_speed?: number | null
  wind_direction?: number | null
  visibility?: number | null
  cloud_ceiling?: number | null
  condition?: WeatherCondition | null
  suitable_for_tandems?: boolean | null
  suitable_for_students?: boolean | null
  suitable_for_fun_jumpers?: boolean | null
}

export type AircraftReadAircraftData = {
  limit?: number
  skip?: number
}

export type AircraftReadAircraftResponse = Array<AircraftPublic>

export type AircraftCreateAircraftData = {
  requestBody: AircraftCreate
}

export type AircraftCreateAircraftResponse = AircraftPublic

export type AircraftReadAircraftByIdData = {
  id: string
}

export type AircraftReadAircraftByIdResponse = AircraftPublic

export type AircraftUpdateAircraftData = {
  id: string
  requestBody: AircraftUpdate
}

export type AircraftUpdateAircraftResponse = AircraftPublic

export type AircraftDeleteAircraftData = {
  id: string
}

export type AircraftDeleteAircraftResponse = Message

export type AnalyticsGetLoadStatisticsResponse = {
  [key: string]: unknown
}

export type AnalyticsGetRevenueEstimateData = {
  loadId: string
}

export type AnalyticsGetRevenueEstimateResponse = {
  [key: string]: unknown
}

export type AnalyticsGetInstructorWorkloadData = {
  instructorId?: string | null
}

export type AnalyticsGetInstructorWorkloadResponse = {
  [key: string]: unknown
}

export type AnalyticsGetDailyCapacityData = {
  targetDate: string
}

export type AnalyticsGetDailyCapacityResponse = {
  [key: string]: unknown
}

export type AnalyticsGetJumpTypeDistributionData = {
  endDate?: string | null
  startDate?: string | null
}

export type AnalyticsGetJumpTypeDistributionResponse = {
  [key: string]: unknown
}

export type AnalyticsGetWeatherImpactData = {
  days?: number
}

export type AnalyticsGetWeatherImpactResponse = {
  [key: string]: unknown
}

export type InstructorsReadInstructorsData = {
  limit?: number
  skip?: number
}

export type InstructorsReadInstructorsResponse = InstructorsPublic

export type InstructorsCreateInstructorData = {
  requestBody: InstructorCreate
}

export type InstructorsCreateInstructorResponse = InstructorPublic

export type InstructorsReadInstructorData = {
  id: string
}

export type InstructorsReadInstructorResponse = InstructorPublic

export type InstructorsUpdateInstructorData = {
  id: string
  requestBody: InstructorUpdate
}

export type InstructorsUpdateInstructorResponse = InstructorPublic

export type InstructorsDeleteInstructorData = {
  id: string
}

export type InstructorsDeleteInstructorResponse = Message

export type InstructorsReadTandemInstructorsData = {
  limit?: number
  skip?: number
}

export type InstructorsReadTandemInstructorsResponse = InstructorsPublic

export type InstructorsReadAffInstructorsData = {
  limit?: number
  skip?: number
}

export type InstructorsReadAffInstructorsResponse = InstructorsPublic

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type JumpsReadJumpsData = {
  limit?: number
  skip?: number
}

export type JumpsReadJumpsResponse = JumpsPublic

export type JumpsCreateJumpData = {
  requestBody: JumpCreate
}

export type JumpsCreateJumpResponse = JumpPublic

export type JumpsReadJumpData = {
  id: string
}

export type JumpsReadJumpResponse = JumpPublic

export type JumpsUpdateJumpData = {
  id: string
  requestBody: JumpUpdate
}

export type JumpsUpdateJumpResponse = JumpPublic

export type JumpsDeleteJumpData = {
  id: string
}

export type JumpsDeleteJumpResponse = Message

export type JumpsReadJumpsByTypeData = {
  jumpType: JumpType
  limit?: number
  skip?: number
}

export type JumpsReadJumpsByTypeResponse = JumpsPublic

export type JumpsReadJumpsByLoadData = {
  limit?: number
  loadId: string
  skip?: number
}

export type JumpsReadJumpsByLoadResponse = JumpsPublic

export type JumpsReadJumpsByInstructorData = {
  instructorId: string
  limit?: number
  skip?: number
}

export type JumpsReadJumpsByInstructorResponse = JumpsPublic

export type JumpsReadTandemJumpsData = {
  limit?: number
  skip?: number
}

export type JumpsReadTandemJumpsResponse = JumpsPublic

export type JumpsReadAffJumpsData = {
  limit?: number
  skip?: number
}

export type JumpsReadAffJumpsResponse = JumpsPublic

export type JumpsAssignInstructorToJumpData = {
  id: string
  instructorId: string
}

export type JumpsAssignInstructorToJumpResponse = Message

export type LoadsReadLoadsData = {
  limit?: number
  skip?: number
}

export type LoadsReadLoadsResponse = LoadsPublic

export type LoadsCreateLoadData = {
  requestBody: LoadCreate
}

export type LoadsCreateLoadResponse = LoadPublic

export type LoadsReadLoadData = {
  id: string
}

export type LoadsReadLoadResponse = LoadPublic

export type LoadsUpdateLoadData = {
  id: string
  requestBody: LoadUpdate
}

export type LoadsUpdateLoadResponse = LoadPublic

export type LoadsDeleteLoadData = {
  id: string
}

export type LoadsDeleteLoadResponse = Message

export type LoadsReadLoadsByStatusData = {
  limit?: number
  skip?: number
  status: LoadStatus
}

export type LoadsReadLoadsByStatusResponse = LoadsPublic

export type LoadsReadTodaysLoadsData = {
  limit?: number
  skip?: number
}

export type LoadsReadTodaysLoadsResponse = LoadsPublic

export type LoadsAddJumperToLoadData = {
  id: string
  jumperId: string
}

export type LoadsAddJumperToLoadResponse = Message

export type LoadsRemoveJumperFromLoadData = {
  id: string
  jumperId: string
}

export type LoadsRemoveJumperFromLoadResponse = Message

export type LoadsGetLoadCapacityData = {
  id: string
}

export type LoadsGetLoadCapacityResponse = {
  [key: string]: unknown
}

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean

export type WeatherReadWeatherReportsData = {
  limit?: number
  skip?: number
}

export type WeatherReadWeatherReportsResponse = WeatherReportsPublic

export type WeatherCreateWeatherReportData = {
  requestBody: WeatherReportCreate
}

export type WeatherCreateWeatherReportResponse = WeatherReportPublic

export type WeatherReadWeatherReportData = {
  id: string
}

export type WeatherReadWeatherReportResponse = WeatherReportPublic

export type WeatherUpdateWeatherReportData = {
  id: string
  requestBody: WeatherReportUpdate
}

export type WeatherUpdateWeatherReportResponse = WeatherReportPublic

export type WeatherDeleteWeatherReportData = {
  id: string
}

export type WeatherDeleteWeatherReportResponse = Message

export type WeatherReadCurrentWeatherResponse = WeatherReportPublic

export type WeatherReadTodaysWeatherData = {
  limit?: number
  skip?: number
}

export type WeatherReadTodaysWeatherResponse = WeatherReportsPublic

export type WeatherReadSuitableWeatherData = {
  limit?: number
  skip?: number
}

export type WeatherReadSuitableWeatherResponse = WeatherReportsPublic

export type WeatherReadTandemSuitableWeatherData = {
  limit?: number
  skip?: number
}

export type WeatherReadTandemSuitableWeatherResponse = WeatherReportsPublic

export type WeatherReadStudentSuitableWeatherData = {
  limit?: number
  skip?: number
}

export type WeatherReadStudentSuitableWeatherResponse = WeatherReportsPublic
