// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AircraftCreateAircraftData,
  AircraftCreateAircraftResponse,
  AircraftDeleteAircraftData,
  AircraftDeleteAircraftResponse,
  AircraftReadAircraftByIdData,
  AircraftReadAircraftByIdResponse,
  AircraftReadAircraftData,
  AircraftReadAircraftResponse,
  AircraftUpdateAircraftData,
  AircraftUpdateAircraftResponse,
  AnalyticsGetDailyCapacityData,
  AnalyticsGetDailyCapacityResponse,
  AnalyticsGetInstructorWorkloadData,
  AnalyticsGetInstructorWorkloadResponse,
  AnalyticsGetJumpTypeDistributionData,
  AnalyticsGetJumpTypeDistributionResponse,
  AnalyticsGetLoadStatisticsResponse,
  AnalyticsGetRevenueEstimateData,
  AnalyticsGetRevenueEstimateResponse,
  AnalyticsGetWeatherImpactData,
  AnalyticsGetWeatherImpactResponse,
  InstructorsCreateInstructorData,
  InstructorsCreateInstructorResponse,
  InstructorsDeleteInstructorData,
  InstructorsDeleteInstructorResponse,
  InstructorsReadAffInstructorsData,
  InstructorsReadAffInstructorsResponse,
  InstructorsReadInstructorData,
  InstructorsReadInstructorResponse,
  InstructorsReadInstructorsData,
  InstructorsReadInstructorsResponse,
  InstructorsReadTandemInstructorsData,
  InstructorsReadTandemInstructorsResponse,
  InstructorsUpdateInstructorData,
  InstructorsUpdateInstructorResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  JumpsAssignInstructorToJumpData,
  JumpsAssignInstructorToJumpResponse,
  JumpsCreateJumpData,
  JumpsCreateJumpResponse,
  JumpsDeleteJumpData,
  JumpsDeleteJumpResponse,
  JumpsReadAffJumpsData,
  JumpsReadAffJumpsResponse,
  JumpsReadJumpData,
  JumpsReadJumpResponse,
  JumpsReadJumpsByInstructorData,
  JumpsReadJumpsByInstructorResponse,
  JumpsReadJumpsByLoadData,
  JumpsReadJumpsByLoadResponse,
  JumpsReadJumpsByTypeData,
  JumpsReadJumpsByTypeResponse,
  JumpsReadJumpsData,
  JumpsReadJumpsResponse,
  JumpsReadTandemJumpsData,
  JumpsReadTandemJumpsResponse,
  JumpsUpdateJumpData,
  JumpsUpdateJumpResponse,
  LoadsAddJumperToLoadData,
  LoadsAddJumperToLoadResponse,
  LoadsCreateLoadData,
  LoadsCreateLoadResponse,
  LoadsDeleteLoadData,
  LoadsDeleteLoadResponse,
  LoadsGetLoadCapacityData,
  LoadsGetLoadCapacityResponse,
  LoadsReadLoadData,
  LoadsReadLoadResponse,
  LoadsReadLoadsByStatusData,
  LoadsReadLoadsByStatusResponse,
  LoadsReadLoadsData,
  LoadsReadLoadsResponse,
  LoadsReadTodaysLoadsData,
  LoadsReadTodaysLoadsResponse,
  LoadsRemoveJumperFromLoadData,
  LoadsRemoveJumperFromLoadResponse,
  LoadsUpdateLoadData,
  LoadsUpdateLoadResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginTestTokenResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserMeResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsHealthCheckResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  WeatherCreateWeatherReportData,
  WeatherCreateWeatherReportResponse,
  WeatherDeleteWeatherReportData,
  WeatherDeleteWeatherReportResponse,
  WeatherReadCurrentWeatherResponse,
  WeatherReadStudentSuitableWeatherData,
  WeatherReadStudentSuitableWeatherResponse,
  WeatherReadSuitableWeatherData,
  WeatherReadSuitableWeatherResponse,
  WeatherReadTandemSuitableWeatherData,
  WeatherReadTandemSuitableWeatherResponse,
  WeatherReadTodaysWeatherData,
  WeatherReadTodaysWeatherResponse,
  WeatherReadWeatherReportData,
  WeatherReadWeatherReportResponse,
  WeatherReadWeatherReportsData,
  WeatherReadWeatherReportsResponse,
  WeatherUpdateWeatherReportData,
  WeatherUpdateWeatherReportResponse,
} from "./types.gen"

export class AircraftService {
  /**
   * Read Aircraft
   * Retrieve aircraft.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns AircraftPublic Successful Response
   * @throws ApiError
   */
  public static readAircraft(
    data: AircraftReadAircraftData = {},
  ): CancelablePromise<AircraftReadAircraftResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/aircraft/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Aircraft
   * Create new aircraft.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AircraftPublic Successful Response
   * @throws ApiError
   */
  public static createAircraft(
    data: AircraftCreateAircraftData,
  ): CancelablePromise<AircraftCreateAircraftResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/aircraft/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Aircraft By Id
   * Get aircraft by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns AircraftPublic Successful Response
   * @throws ApiError
   */
  public static readAircraftById(
    data: AircraftReadAircraftByIdData,
  ): CancelablePromise<AircraftReadAircraftByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/aircraft/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Aircraft
   * Update an aircraft.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns AircraftPublic Successful Response
   * @throws ApiError
   */
  public static updateAircraft(
    data: AircraftUpdateAircraftData,
  ): CancelablePromise<AircraftUpdateAircraftResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/aircraft/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Aircraft
   * Delete an aircraft.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteAircraft(
    data: AircraftDeleteAircraftData,
  ): CancelablePromise<AircraftDeleteAircraftResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/aircraft/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class AnalyticsService {
  /**
   * Get Load Statistics
   * Get load statistics and analytics.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getLoadStatistics(): CancelablePromise<AnalyticsGetLoadStatisticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/analytics/load-statistics",
    })
  }

  /**
   * Get Revenue Estimate
   * Get revenue estimate for a specific load.
   * @param data The data for the request.
   * @param data.loadId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getRevenueEstimate(
    data: AnalyticsGetRevenueEstimateData,
  ): CancelablePromise<AnalyticsGetRevenueEstimateResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/analytics/revenue-estimate",
      query: {
        load_id: data.loadId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Instructor Workload
   * Get instructor workload statistics.
   * @param data The data for the request.
   * @param data.instructorId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getInstructorWorkload(
    data: AnalyticsGetInstructorWorkloadData = {},
  ): CancelablePromise<AnalyticsGetInstructorWorkloadResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/analytics/instructor-workload",
      query: {
        instructor_id: data.instructorId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Daily Capacity
   * Get daily capacity utilization for a specific date.
   * @param data The data for the request.
   * @param data.targetDate
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getDailyCapacity(
    data: AnalyticsGetDailyCapacityData,
  ): CancelablePromise<AnalyticsGetDailyCapacityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/analytics/daily-capacity/{target_date}",
      path: {
        target_date: data.targetDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Jump Type Distribution
   * Get distribution of jump types over a date range.
   * @param data The data for the request.
   * @param data.startDate
   * @param data.endDate
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getJumpTypeDistribution(
    data: AnalyticsGetJumpTypeDistributionData = {},
  ): CancelablePromise<AnalyticsGetJumpTypeDistributionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/analytics/jump-type-distribution",
      query: {
        start_date: data.startDate,
        end_date: data.endDate,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Weather Impact
   * Get weather impact on jumping operations over the last N days.
   * @param data The data for the request.
   * @param data.days
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getWeatherImpact(
    data: AnalyticsGetWeatherImpactData = {},
  ): CancelablePromise<AnalyticsGetWeatherImpactResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/analytics/weather-impact",
      query: {
        days: data.days,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class InstructorsService {
  /**
   * Read Instructors
   * Retrieve instructors.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns InstructorsPublic Successful Response
   * @throws ApiError
   */
  public static readInstructors(
    data: InstructorsReadInstructorsData = {},
  ): CancelablePromise<InstructorsReadInstructorsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/instructors/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Instructor
   * Create new instructor.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InstructorPublic Successful Response
   * @throws ApiError
   */
  public static createInstructor(
    data: InstructorsCreateInstructorData,
  ): CancelablePromise<InstructorsCreateInstructorResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/instructors/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Instructor
   * Get instructor by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns InstructorPublic Successful Response
   * @throws ApiError
   */
  public static readInstructor(
    data: InstructorsReadInstructorData,
  ): CancelablePromise<InstructorsReadInstructorResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/instructors/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Instructor
   * Update an instructor.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns InstructorPublic Successful Response
   * @throws ApiError
   */
  public static updateInstructor(
    data: InstructorsUpdateInstructorData,
  ): CancelablePromise<InstructorsUpdateInstructorResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/instructors/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Instructor
   * Delete an instructor.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteInstructor(
    data: InstructorsDeleteInstructorData,
  ): CancelablePromise<InstructorsDeleteInstructorResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/instructors/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Tandem Instructors
   * Retrieve tandem-certified instructors.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns InstructorsPublic Successful Response
   * @throws ApiError
   */
  public static readTandemInstructors(
    data: InstructorsReadTandemInstructorsData = {},
  ): CancelablePromise<InstructorsReadTandemInstructorsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/instructors/tandem-certified/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Aff Instructors
   * Retrieve AFF-certified instructors.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns InstructorsPublic Successful Response
   * @throws ApiError
   */
  public static readAffInstructors(
    data: InstructorsReadAffInstructorsData = {},
  ): CancelablePromise<InstructorsReadAffInstructorsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/instructors/aff-certified/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class JumpsService {
  /**
   * Read Jumps
   * Retrieve jumps.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns JumpsPublic Successful Response
   * @throws ApiError
   */
  public static readJumps(
    data: JumpsReadJumpsData = {},
  ): CancelablePromise<JumpsReadJumpsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Jump
   * Create new jump.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns JumpPublic Successful Response
   * @throws ApiError
   */
  public static createJump(
    data: JumpsCreateJumpData,
  ): CancelablePromise<JumpsCreateJumpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jumps/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Jump
   * Get jump by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns JumpPublic Successful Response
   * @throws ApiError
   */
  public static readJump(
    data: JumpsReadJumpData,
  ): CancelablePromise<JumpsReadJumpResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Jump
   * Update a jump.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns JumpPublic Successful Response
   * @throws ApiError
   */
  public static updateJump(
    data: JumpsUpdateJumpData,
  ): CancelablePromise<JumpsUpdateJumpResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/jumps/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Jump
   * Delete a jump.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteJump(
    data: JumpsDeleteJumpData,
  ): CancelablePromise<JumpsDeleteJumpResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/jumps/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Jumps By Type
   * Retrieve jumps by type.
   * @param data The data for the request.
   * @param data.jumpType
   * @param data.skip
   * @param data.limit
   * @returns JumpsPublic Successful Response
   * @throws ApiError
   */
  public static readJumpsByType(
    data: JumpsReadJumpsByTypeData,
  ): CancelablePromise<JumpsReadJumpsByTypeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/by-type/{jump_type}",
      path: {
        jump_type: data.jumpType,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Jumps By Load
   * Retrieve jumps for a specific load.
   * @param data The data for the request.
   * @param data.loadId
   * @param data.skip
   * @param data.limit
   * @returns JumpsPublic Successful Response
   * @throws ApiError
   */
  public static readJumpsByLoad(
    data: JumpsReadJumpsByLoadData,
  ): CancelablePromise<JumpsReadJumpsByLoadResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/by-load/{load_id}",
      path: {
        load_id: data.loadId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Jumps By Instructor
   * Retrieve jumps for a specific instructor.
   * @param data The data for the request.
   * @param data.instructorId
   * @param data.skip
   * @param data.limit
   * @returns JumpsPublic Successful Response
   * @throws ApiError
   */
  public static readJumpsByInstructor(
    data: JumpsReadJumpsByInstructorData,
  ): CancelablePromise<JumpsReadJumpsByInstructorResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/by-instructor/{instructor_id}",
      path: {
        instructor_id: data.instructorId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Tandem Jumps
   * Retrieve tandem jumps.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns JumpsPublic Successful Response
   * @throws ApiError
   */
  public static readTandemJumps(
    data: JumpsReadTandemJumpsData = {},
  ): CancelablePromise<JumpsReadTandemJumpsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/tandems/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Aff Jumps
   * Retrieve AFF jumps.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns JumpsPublic Successful Response
   * @throws ApiError
   */
  public static readAffJumps(
    data: JumpsReadAffJumpsData = {},
  ): CancelablePromise<JumpsReadAffJumpsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/jumps/aff/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Assign Instructor To Jump
   * Assign an instructor to a jump.
   * @param data The data for the request.
   * @param data.id
   * @param data.instructorId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static assignInstructorToJump(
    data: JumpsAssignInstructorToJumpData,
  ): CancelablePromise<JumpsAssignInstructorToJumpResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/jumps/{id}/assign-instructor",
      path: {
        id: data.id,
      },
      query: {
        instructor_id: data.instructorId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoadsService {
  /**
   * Read Loads
   * Retrieve loads.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns LoadsPublic Successful Response
   * @throws ApiError
   */
  public static readLoads(
    data: LoadsReadLoadsData = {},
  ): CancelablePromise<LoadsReadLoadsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/loads/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Load
   * Create new load.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns LoadPublic Successful Response
   * @throws ApiError
   */
  public static createLoad(
    data: LoadsCreateLoadData,
  ): CancelablePromise<LoadsCreateLoadResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/loads/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Load
   * Get load by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns LoadPublic Successful Response
   * @throws ApiError
   */
  public static readLoad(
    data: LoadsReadLoadData,
  ): CancelablePromise<LoadsReadLoadResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/loads/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Load
   * Update a load.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns LoadPublic Successful Response
   * @throws ApiError
   */
  public static updateLoad(
    data: LoadsUpdateLoadData,
  ): CancelablePromise<LoadsUpdateLoadResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/loads/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Load
   * Delete a load.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteLoad(
    data: LoadsDeleteLoadData,
  ): CancelablePromise<LoadsDeleteLoadResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/loads/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Loads By Status
   * Retrieve loads by status.
   * @param data The data for the request.
   * @param data.status
   * @param data.skip
   * @param data.limit
   * @returns LoadsPublic Successful Response
   * @throws ApiError
   */
  public static readLoadsByStatus(
    data: LoadsReadLoadsByStatusData,
  ): CancelablePromise<LoadsReadLoadsByStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/loads/by-status/{status}",
      path: {
        status: data.status,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Todays Loads
   * Retrieve today's loads.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns LoadsPublic Successful Response
   * @throws ApiError
   */
  public static readTodaysLoads(
    data: LoadsReadTodaysLoadsData = {},
  ): CancelablePromise<LoadsReadTodaysLoadsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/loads/today/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Jumper To Load
   * Add a jumper to a load.
   * @param data The data for the request.
   * @param data.id
   * @param data.jumperId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addJumperToLoad(
    data: LoadsAddJumperToLoadData,
  ): CancelablePromise<LoadsAddJumperToLoadResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/loads/{id}/add-jumper",
      path: {
        id: data.id,
      },
      query: {
        jumper_id: data.jumperId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Jumper From Load
   * Remove a jumper from a load.
   * @param data The data for the request.
   * @param data.id
   * @param data.jumperId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeJumperFromLoad(
    data: LoadsRemoveJumperFromLoadData,
  ): CancelablePromise<LoadsRemoveJumperFromLoadResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/loads/{id}/remove-jumper/{jumper_id}",
      path: {
        id: data.id,
        jumper_id: data.jumperId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Load Capacity
   * Get load capacity information.
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getLoadCapacity(
    data: LoadsGetLoadCapacityData,
  ): CancelablePromise<LoadsGetLoadCapacityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/loads/{id}/capacity",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}

export class WeatherService {
  /**
   * Read Weather Reports
   * Retrieve weather reports.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns WeatherReportsPublic Successful Response
   * @throws ApiError
   */
  public static readWeatherReports(
    data: WeatherReadWeatherReportsData = {},
  ): CancelablePromise<WeatherReadWeatherReportsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Weather Report
   * Create new weather report.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WeatherReportPublic Successful Response
   * @throws ApiError
   */
  public static createWeatherReport(
    data: WeatherCreateWeatherReportData,
  ): CancelablePromise<WeatherCreateWeatherReportResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/weather/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Weather Report
   * Get weather report by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns WeatherReportPublic Successful Response
   * @throws ApiError
   */
  public static readWeatherReport(
    data: WeatherReadWeatherReportData,
  ): CancelablePromise<WeatherReadWeatherReportResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Weather Report
   * Update a weather report.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns WeatherReportPublic Successful Response
   * @throws ApiError
   */
  public static updateWeatherReport(
    data: WeatherUpdateWeatherReportData,
  ): CancelablePromise<WeatherUpdateWeatherReportResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/weather/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Weather Report
   * Delete a weather report.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteWeatherReport(
    data: WeatherDeleteWeatherReportData,
  ): CancelablePromise<WeatherDeleteWeatherReportResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/weather/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Current Weather
   * Get the most recent weather report.
   * @returns WeatherReportPublic Successful Response
   * @throws ApiError
   */
  public static readCurrentWeather(): CancelablePromise<WeatherReadCurrentWeatherResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/current/",
    })
  }

  /**
   * Read Todays Weather
   * Retrieve today's weather reports.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns WeatherReportsPublic Successful Response
   * @throws ApiError
   */
  public static readTodaysWeather(
    data: WeatherReadTodaysWeatherData = {},
  ): CancelablePromise<WeatherReadTodaysWeatherResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/today/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Suitable Weather
   * Retrieve weather reports suitable for jumping.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns WeatherReportsPublic Successful Response
   * @throws ApiError
   */
  public static readSuitableWeather(
    data: WeatherReadSuitableWeatherData = {},
  ): CancelablePromise<WeatherReadSuitableWeatherResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/suitable-for-jumping/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Tandem Suitable Weather
   * Retrieve weather reports suitable for tandem jumps.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns WeatherReportsPublic Successful Response
   * @throws ApiError
   */
  public static readTandemSuitableWeather(
    data: WeatherReadTandemSuitableWeatherData = {},
  ): CancelablePromise<WeatherReadTandemSuitableWeatherResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/tandem-suitable/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Student Suitable Weather
   * Retrieve weather reports suitable for student jumps.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns WeatherReportsPublic Successful Response
   * @throws ApiError
   */
  public static readStudentSuitableWeather(
    data: WeatherReadStudentSuitableWeatherData = {},
  ): CancelablePromise<WeatherReadStudentSuitableWeatherResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/weather/student-suitable/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}
